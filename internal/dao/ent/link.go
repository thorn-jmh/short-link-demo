// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-svc-tpl/internal/dao/ent/link"
	"go-svc-tpl/internal/dao/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Link is the model entity for the Link schema.
type Link struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// Short holds the value of the "short" field.
	Short string `json:"short,omitempty"`
	// Origin holds the value of the "origin" field.
	Origin string `json:"origin,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime *time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime *time.Time `json:"end_time,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LinkQuery when eager-loading is set.
	Edges        LinkEdges `json:"edges"`
	owner_id     *uint
	selectValues sql.SelectValues
}

// LinkEdges holds the relations/edges for other nodes in the graph.
type LinkEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LinkEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Link) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case link.FieldActive:
			values[i] = new(sql.NullBool)
		case link.FieldID:
			values[i] = new(sql.NullInt64)
		case link.FieldShort, link.FieldOrigin, link.FieldComment:
			values[i] = new(sql.NullString)
		case link.FieldStartTime, link.FieldEndTime:
			values[i] = new(sql.NullTime)
		case link.ForeignKeys[0]: // owner_id
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Link fields.
func (l *Link) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case link.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = uint(value.Int64)
		case link.FieldShort:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short", values[i])
			} else if value.Valid {
				l.Short = value.String
			}
		case link.FieldOrigin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field origin", values[i])
			} else if value.Valid {
				l.Origin = value.String
			}
		case link.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				l.Comment = value.String
			}
		case link.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				l.StartTime = new(time.Time)
				*l.StartTime = value.Time
			}
		case link.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				l.EndTime = new(time.Time)
				*l.EndTime = value.Time
			}
		case link.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				l.Active = value.Bool
			}
		case link.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field owner_id", value)
			} else if value.Valid {
				l.owner_id = new(uint)
				*l.owner_id = uint(value.Int64)
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Link.
// This includes values selected through modifiers, order, etc.
func (l *Link) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Link entity.
func (l *Link) QueryOwner() *UserQuery {
	return NewLinkClient(l.config).QueryOwner(l)
}

// Update returns a builder for updating this Link.
// Note that you need to call Link.Unwrap() before calling this method if this Link
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Link) Update() *LinkUpdateOne {
	return NewLinkClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Link entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Link) Unwrap() *Link {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Link is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Link) String() string {
	var builder strings.Builder
	builder.WriteString("Link(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("short=")
	builder.WriteString(l.Short)
	builder.WriteString(", ")
	builder.WriteString("origin=")
	builder.WriteString(l.Origin)
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(l.Comment)
	builder.WriteString(", ")
	if v := l.StartTime; v != nil {
		builder.WriteString("start_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := l.EndTime; v != nil {
		builder.WriteString("end_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", l.Active))
	builder.WriteByte(')')
	return builder.String()
}

// Links is a parsable slice of Link.
type Links []*Link
