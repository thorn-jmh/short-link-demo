// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-svc-tpl/internal/dao/ent/link"
	"go-svc-tpl/internal/dao/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LinkCreate is the builder for creating a Link entity.
type LinkCreate struct {
	config
	mutation *LinkMutation
	hooks    []Hook
}

// SetShort sets the "short" field.
func (lc *LinkCreate) SetShort(s string) *LinkCreate {
	lc.mutation.SetShort(s)
	return lc
}

// SetNillableShort sets the "short" field if the given value is not nil.
func (lc *LinkCreate) SetNillableShort(s *string) *LinkCreate {
	if s != nil {
		lc.SetShort(*s)
	}
	return lc
}

// SetOrigin sets the "origin" field.
func (lc *LinkCreate) SetOrigin(s string) *LinkCreate {
	lc.mutation.SetOrigin(s)
	return lc
}

// SetComment sets the "comment" field.
func (lc *LinkCreate) SetComment(s string) *LinkCreate {
	lc.mutation.SetComment(s)
	return lc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (lc *LinkCreate) SetNillableComment(s *string) *LinkCreate {
	if s != nil {
		lc.SetComment(*s)
	}
	return lc
}

// SetStartTime sets the "start_time" field.
func (lc *LinkCreate) SetStartTime(t time.Time) *LinkCreate {
	lc.mutation.SetStartTime(t)
	return lc
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (lc *LinkCreate) SetNillableStartTime(t *time.Time) *LinkCreate {
	if t != nil {
		lc.SetStartTime(*t)
	}
	return lc
}

// SetEndTime sets the "end_time" field.
func (lc *LinkCreate) SetEndTime(t time.Time) *LinkCreate {
	lc.mutation.SetEndTime(t)
	return lc
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (lc *LinkCreate) SetNillableEndTime(t *time.Time) *LinkCreate {
	if t != nil {
		lc.SetEndTime(*t)
	}
	return lc
}

// SetActive sets the "active" field.
func (lc *LinkCreate) SetActive(b bool) *LinkCreate {
	lc.mutation.SetActive(b)
	return lc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (lc *LinkCreate) SetNillableActive(b *bool) *LinkCreate {
	if b != nil {
		lc.SetActive(*b)
	}
	return lc
}

// SetID sets the "id" field.
func (lc *LinkCreate) SetID(u uint) *LinkCreate {
	lc.mutation.SetID(u)
	return lc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (lc *LinkCreate) SetOwnerID(id uint) *LinkCreate {
	lc.mutation.SetOwnerID(id)
	return lc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (lc *LinkCreate) SetNillableOwnerID(id *uint) *LinkCreate {
	if id != nil {
		lc = lc.SetOwnerID(*id)
	}
	return lc
}

// SetOwner sets the "owner" edge to the User entity.
func (lc *LinkCreate) SetOwner(u *User) *LinkCreate {
	return lc.SetOwnerID(u.ID)
}

// Mutation returns the LinkMutation object of the builder.
func (lc *LinkCreate) Mutation() *LinkMutation {
	return lc.mutation
}

// Save creates the Link in the database.
func (lc *LinkCreate) Save(ctx context.Context) (*Link, error) {
	lc.defaults()
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LinkCreate) SaveX(ctx context.Context) *Link {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LinkCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LinkCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LinkCreate) defaults() {
	if _, ok := lc.mutation.Comment(); !ok {
		v := link.DefaultComment
		lc.mutation.SetComment(v)
	}
	if _, ok := lc.mutation.Active(); !ok {
		v := link.DefaultActive
		lc.mutation.SetActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LinkCreate) check() error {
	if v, ok := lc.mutation.Short(); ok {
		if err := link.ShortValidator(v); err != nil {
			return &ValidationError{Name: "short", err: fmt.Errorf(`ent: validator failed for field "Link.short": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Origin(); !ok {
		return &ValidationError{Name: "origin", err: errors.New(`ent: missing required field "Link.origin"`)}
	}
	if _, ok := lc.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required field "Link.comment"`)}
	}
	if _, ok := lc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "Link.active"`)}
	}
	return nil
}

func (lc *LinkCreate) sqlSave(ctx context.Context) (*Link, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LinkCreate) createSpec() (*Link, *sqlgraph.CreateSpec) {
	var (
		_node = &Link{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(link.Table, sqlgraph.NewFieldSpec(link.FieldID, field.TypeUint))
	)
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lc.mutation.Short(); ok {
		_spec.SetField(link.FieldShort, field.TypeString, value)
		_node.Short = value
	}
	if value, ok := lc.mutation.Origin(); ok {
		_spec.SetField(link.FieldOrigin, field.TypeString, value)
		_node.Origin = value
	}
	if value, ok := lc.mutation.Comment(); ok {
		_spec.SetField(link.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := lc.mutation.StartTime(); ok {
		_spec.SetField(link.FieldStartTime, field.TypeTime, value)
		_node.StartTime = &value
	}
	if value, ok := lc.mutation.EndTime(); ok {
		_spec.SetField(link.FieldEndTime, field.TypeTime, value)
		_node.EndTime = &value
	}
	if value, ok := lc.mutation.Active(); ok {
		_spec.SetField(link.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if nodes := lc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   link.OwnerTable,
			Columns: []string{link.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.owner_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LinkCreateBulk is the builder for creating many Link entities in bulk.
type LinkCreateBulk struct {
	config
	builders []*LinkCreate
}

// Save creates the Link entities in the database.
func (lcb *LinkCreateBulk) Save(ctx context.Context) ([]*Link, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Link, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LinkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LinkCreateBulk) SaveX(ctx context.Context) []*Link {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LinkCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LinkCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
